0x00 格式
     以分号结尾，不区分是否换行，区分大小写。

0x01 注释写法
     单行注释用 //
     多行注释用 /* 要注释的内容 */

0x02 标识符
     以字母或者下滑线开头的，由字母，数字，下划线，$符组成的字符。

0x03 表达电路中逻辑的四种数值
     第一种：0 表示假
     第二种：1 表示真
     第三种：x或X 表示未知，即信号不稳定，可能是1，也可能是0
     第四种：z或Z 表示高阻 # TODO:什么是高阻

0x04 数字声明时，合法基数格式四种
     第一种：二进制（b或者B）
     第二种：八进制（o或者O）
     第三种：十进制（d或者D）
     第四种：十六进制（h或者H）
     另外表示的时候，可以指明位宽，也可以不指明位宽
     
     举例子说明：
     4'b1011 表示 位宽为4，的二进制数1011
     # TODO：碰到具体难懂的例子继续追加

0x05 字符串表示
     字符串被双引号引起来，字符串的长度为位宽
     # TODO：进制需要区分吗？写一个具体的例子。

0x06 数据类型
     常用分为两种：
          第一种：wire，也叫线网，线网是硬件单元之间的物理连线。由其连接器件的输出端进行驱动。如果wire类型没有被驱动，其缺省值为Z。
          第二种：reg，也叫寄存器，寄存器是存储单元。直到有改写才变化，否则不变化。（注意：reg类型没有符号）
     
          # TODO：wire和reg的用法与区别
     
     其它：
          第一种：当位宽大于1时，wire和reg可以被声明为向量。
          
          第二种：整数，实数，时间。
                 整数用integer关键字声明，声明时不用指明 位宽（位宽和编译器有关，一般为32bit），有符号。
                 实数用real关键字声明，两种表示方式：十进制，科学计数法。不能带有范围，默认值为0。
                 # TODO：默认值为0，举例子说明。
                 时间用time关键字声明，用于对时间仿真进行保存。位宽一般为64bit。$time 表示调用当前系统时间。
          
          第三种：数组
                 数组可以声明类型，如：reg, wire, integer, time, real
                 # TODO：数组声明举例子
                 # TODO：怎么给数组中元素赋值
          
          第四种：存储器
                 存储器用来描述ROM和RAM的行为。是一种寄存器数组。
          
          第五种：参数
                 参数用parameter关键字声明，表示常量。
          
          第六种：字符串
                 字符串用str关键字表示，在system verilog中用string表示。存储与reg类型的变量中，每个字符占用一个字节（一个字节为8bit），
                 reg类型的变量位宽要足够大，否则会溢出。
                 # TODO：什么是溢出，怎么造成溢出
                 # TODO：如果字符串宽度大于reg类型变量的宽度会怎么样？小于又会怎么样？
                 # 答：补位，截去字符串左边多余数据。
                 # 特殊字符举例

0x07 表达式
     表达式由 操作符 和 操作数 构成。
     操作数：任意数据类型；
     操作符：常用九种
            从左往右关联，圆括号中优先执行
                 算术：单目操作符和双目操作符
                 关系：
                 逻辑：
                 等价：
                 按位：
                 位移：
                 拼接：
                 规约：

            从右往左关联，圆括号中优先执行
                 条件：
            # TODO：举例说明这九种的表达式

0x08 编译指令
     八种编译指令，其中由四种常用的。
     第一种：
          `define：用于文本替换
                   举例说明：
                           `define    S     $stop;  表示用`S 替换系统函数$Stop; 在后面要调用$Stop;的时候，可以直接用`S代替             
          `undef：用于取消之前的替换
                  举例说明：
                           `undef    S              这句话使`define    S     $stop;失效了
     第二种：
          `ifdef：要和`endif成对出现，组成指令块，没有其他编译指令是可以的，用来开始条件判断；
          `ifndef：相当于 if not def；
          `else：`有别于ifdef的情况；
          `elsif：还有第三种或更多判断的时候；
          `endif：和`ifdef成对出现，结束条件判断。
     
     第三种：
          `include：表示要引用哪一个文件，可以用绝对路径也可以用相对路径，路径用双引号引起来。
          
     第四种：
          `timescale：用来定义时延、仿真的单位和精度。
          格式：`timescale time_unit/time_precision
          time_unit表示时间单位：s（秒），ms（毫秒），us（微秒），ns（纳秒），ps（皮秒），fs（飞秒）
          time_precision表示时间精度
     
     PS:'`'在键盘数字1的左边一格，用英文模式。
